mport os, const
from   cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from   cryptography.hazmat.primitives         import padding, hashes, hmac
from   cryptography.hazmat.backends           import default_backend

def my_encrypt_mac(message, enc_key, hmac_key):
    if(len(enc_key) < const.KEY_LENGTH):
        print("Error: Key must be 128 bytes")
        return -1
    
    #pad message
    padder     = padding.PKCS7(const.BLOCK_SIZE).padder()
    padded_msg = padder.update(message) + padder.finalize()
    
    #generate IV
    IV = os.urandom(const.IV_LENGTH)            
    
    #create cipher with key + IV
    cipher = Cipher(algorithms.AES(enc_key), modes.CBC(IV), backend=default_backend())
    encryptor = cipher.encryptor()
    cipher_text = encryptor.update(padded_msg) + encryptor.finalize()
    
    #create tag
    hmac_tag = hmac.HMAC(hmac_key, hashes.SHA256(), backend=default_backend()) 
    hmac_tag.update(cipher_text) #hashes the cipher_text for authentication
    
    return cipher_text, IV, hmac_tag.finalize()
    
def my_decrypt_hmac(cipher_text, IV, enc_key, hmac_key, hmac_tag):
    decrypt_tag = hmac.HMAC(hmac_key, hashes.SHA256(), backend=default_backend())
    decrypt_tag.update(cipher_text)
    
    #check if cipher is good
    decrypt_tag.verify(hmac_tag)
    
    #create cipher with key + IV
    cipher = Cipher(algorithms.AES(enc_key), modes.CBC(IV), backend=default_backend())
    decryptor = cipher.decryptor()
    cipher_text = decryptor.update(cipher_text) + decryptor.finalize()
    
    #unpad
    unpadder = padding.PKCS7(const.BLOCK_SIZE).unpadder()
    plain_text = unpadder.update(cipher_text) + unpadder.finalize()

    return plain_text

def file_encrypt_hmac(file_name):
    name,ext = os.path.splitext(file_name)
    enc_key  = os.urandom(const.KEY_LENGTH) 
    hmac_key = os.urandom(const.KEY_LENGTH) 
    
    try:
        file = open(file_name, "rb") #read bytes
        jpeg_file = file.read()
    finally:
        file.close()

    jpeg_cipher_text, IV, tag = my_encrypt_mac(jpeg_file,enc_key,hmac_key)
    
    try:
        jpeg_enc = open("jpeg_enc.txt", "wb") #write bytes
        jpeg_enc.write(jpeg_cipher_text)
    finally:
        jpeg_enc.close()

    return jpeg_cipher_text, IV, tag, enc_key, hmac_key, ext.encode()

def file_decrypt_hmac(file_name, IV, enc_key, hmac_key, tag):
    name,ext = os.path.splitext(file_name)

    try:
        file = open(file_name, "rb")                          
        jpeg_enc = file.read()
    finally:
        file.close()
        
    jpeg_text = my_decrypt_hmac(jpeg_enc, IV, enc_key, hmac_key, tag)
    
    try:
        jpeg_dec = open("jpeg_dec.jpg", "wb") 
        jpeg_dec.write(jpeg_text)           
    finally:
        jpeg_dec.close()
    
    return jpeg_text
